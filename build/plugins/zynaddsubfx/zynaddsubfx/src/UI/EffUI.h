// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef EffUI_h
#define EffUI_h
#include <FL/Fl.H>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "../globals.h"
#include "WidgetPDial.h"
#include "EnvelopeUI.h"
#include "FilterUI.h"
#include "../Misc/Util.h"
#include "../Effects/EffectMgr.h"
#include "PresetsUI.h"
#include "common.H"

class EQGraph : public Fl_Box {
public:
  EQGraph(int x,int y, int w, int h, const char *label=0);
  void init(EffectMgr *eff_);
  void draw_freq_line(float freq,int type);
  void draw();
  double getresponse(int maxy,float freq);
  float getfreqx(float x);
  float getfreqpos(float freq);
private:
  int oldx; 
public:
  float khzval; 
private:
  EffectMgr *eff; 
  int maxdB; 
};
#include <FL/Fl_Choice.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Double_Window.H>

class EffUI : public Fl_Group,public PresetsUI_ {
public:
  EffUI(int x,int y, int w, int h, const char *label=0);
  ~EffUI();
  Fl_Group* make_null_window();
  Fl_Group *effnullwindow;
  Fl_Group* make_reverb_window();
  Fl_Group *effreverbwindow;
  Fl_Choice *revp;
private:
  inline void cb_revp_i(Fl_Choice*, void*);
  static void cb_revp(Fl_Choice*, void*);
  static Fl_Menu_Item menu_revp[];
public:
  Fl_Choice *revp10;
private:
  inline void cb_revp10_i(Fl_Choice*, void*);
  static void cb_revp10(Fl_Choice*, void*);
  static Fl_Menu_Item menu_revp10[];
public:
  WidgetPDial *revp0;
private:
  inline void cb_revp0_i(WidgetPDial*, void*);
  static void cb_revp0(WidgetPDial*, void*);
public:
  WidgetPDial *revp1;
private:
  inline void cb_revp1_i(WidgetPDial*, void*);
  static void cb_revp1(WidgetPDial*, void*);
public:
  WidgetPDial *revp2;
private:
  inline void cb_revp2_i(WidgetPDial*, void*);
  static void cb_revp2(WidgetPDial*, void*);
public:
  WidgetPDial *revp3;
private:
  inline void cb_revp3_i(WidgetPDial*, void*);
  static void cb_revp3(WidgetPDial*, void*);
public:
  WidgetPDial *revp4;
private:
  inline void cb_revp4_i(WidgetPDial*, void*);
  static void cb_revp4(WidgetPDial*, void*);
public:
  WidgetPDial *revp12;
private:
  inline void cb_revp12_i(WidgetPDial*, void*);
  static void cb_revp12(WidgetPDial*, void*);
public:
  WidgetPDial *revp6;
private:
  inline void cb_revp6_i(WidgetPDial*, void*);
  static void cb_revp6(WidgetPDial*, void*);
public:
  WidgetPDial *revp7;
private:
  inline void cb_revp7_i(WidgetPDial*, void*);
  static void cb_revp7(WidgetPDial*, void*);
public:
  WidgetPDial *revp8;
private:
  inline void cb_revp8_i(WidgetPDial*, void*);
  static void cb_revp8(WidgetPDial*, void*);
public:
  WidgetPDial *revp9;
private:
  inline void cb_revp9_i(WidgetPDial*, void*);
  static void cb_revp9(WidgetPDial*, void*);
public:
  WidgetPDial *revp11;
private:
  inline void cb_revp11_i(WidgetPDial*, void*);
  static void cb_revp11(WidgetPDial*, void*);
public:
  Fl_Group* make_echo_window();
  Fl_Group *effechowindow;
  Fl_Choice *echop;
private:
  inline void cb_echop_i(Fl_Choice*, void*);
  static void cb_echop(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echop[];
public:
  WidgetPDial *echop0;
private:
  inline void cb_echop0_i(WidgetPDial*, void*);
  static void cb_echop0(WidgetPDial*, void*);
public:
  WidgetPDial *echop1;
private:
  inline void cb_echop1_i(WidgetPDial*, void*);
  static void cb_echop1(WidgetPDial*, void*);
public:
  WidgetPDial *echop2;
private:
  inline void cb_echop2_i(WidgetPDial*, void*);
  static void cb_echop2(WidgetPDial*, void*);
public:
  WidgetPDial *echop3;
private:
  inline void cb_echop3_i(WidgetPDial*, void*);
  static void cb_echop3(WidgetPDial*, void*);
public:
  WidgetPDial *echop4;
private:
  inline void cb_echop4_i(WidgetPDial*, void*);
  static void cb_echop4(WidgetPDial*, void*);
public:
  WidgetPDial *echop5;
private:
  inline void cb_echop5_i(WidgetPDial*, void*);
  static void cb_echop5(WidgetPDial*, void*);
public:
  WidgetPDial *echop6;
private:
  inline void cb_echop6_i(WidgetPDial*, void*);
  static void cb_echop6(WidgetPDial*, void*);
public:
  Fl_Group* make_chorus_window();
  Fl_Group *effchoruswindow;
  Fl_Choice *chorusp;
private:
  inline void cb_chorusp_i(Fl_Choice*, void*);
  static void cb_chorusp(Fl_Choice*, void*);
  static Fl_Menu_Item menu_chorusp[];
public:
  WidgetPDial *chorusp0;
private:
  inline void cb_chorusp0_i(WidgetPDial*, void*);
  static void cb_chorusp0(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp1;
private:
  inline void cb_chorusp1_i(WidgetPDial*, void*);
  static void cb_chorusp1(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp2;
private:
  inline void cb_chorusp2_i(WidgetPDial*, void*);
  static void cb_chorusp2(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp3;
private:
  inline void cb_chorusp3_i(WidgetPDial*, void*);
  static void cb_chorusp3(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp5;
private:
  inline void cb_chorusp5_i(WidgetPDial*, void*);
  static void cb_chorusp5(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp6;
private:
  inline void cb_chorusp6_i(WidgetPDial*, void*);
  static void cb_chorusp6(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp7;
private:
  inline void cb_chorusp7_i(WidgetPDial*, void*);
  static void cb_chorusp7(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp8;
private:
  inline void cb_chorusp8_i(WidgetPDial*, void*);
  static void cb_chorusp8(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp9;
private:
  inline void cb_chorusp9_i(WidgetPDial*, void*);
  static void cb_chorusp9(WidgetPDial*, void*);
  inline void cb_Flange_i(Fl_Check_Button*, void*);
  static void cb_Flange(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *chorusp11;
private:
  inline void cb_chorusp11_i(Fl_Check_Button*, void*);
  static void cb_chorusp11(Fl_Check_Button*, void*);
public:
  Fl_Choice *chorusp4;
private:
  inline void cb_chorusp4_i(Fl_Choice*, void*);
  static void cb_chorusp4(Fl_Choice*, void*);
  static Fl_Menu_Item menu_chorusp4[];
public:
  Fl_Group* make_phaser_window();
  Fl_Group *effphaserwindow;
  Fl_Choice *phaserp;
private:
  inline void cb_phaserp_i(Fl_Choice*, void*);
  static void cb_phaserp(Fl_Choice*, void*);
  static Fl_Menu_Item menu_phaserp[];
public:
  WidgetPDial *phaserp0;
private:
  inline void cb_phaserp0_i(WidgetPDial*, void*);
  static void cb_phaserp0(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp1;
private:
  inline void cb_phaserp1_i(WidgetPDial*, void*);
  static void cb_phaserp1(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp2;
private:
  inline void cb_phaserp2_i(WidgetPDial*, void*);
  static void cb_phaserp2(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp3;
private:
  inline void cb_phaserp3_i(WidgetPDial*, void*);
  static void cb_phaserp3(WidgetPDial*, void*);
public:
  Fl_Choice *phaserp4;
private:
  inline void cb_phaserp4_i(Fl_Choice*, void*);
  static void cb_phaserp4(Fl_Choice*, void*);
  static Fl_Menu_Item menu_phaserp4[];
public:
  WidgetPDial *phaserp5;
private:
  inline void cb_phaserp5_i(WidgetPDial*, void*);
  static void cb_phaserp5(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp6;
private:
  inline void cb_phaserp6_i(WidgetPDial*, void*);
  static void cb_phaserp6(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp7;
private:
  inline void cb_phaserp7_i(WidgetPDial*, void*);
  static void cb_phaserp7(WidgetPDial*, void*);
public:
  Fl_Counter *phaserp8;
private:
  inline void cb_phaserp8_i(Fl_Counter*, void*);
  static void cb_phaserp8(Fl_Counter*, void*);
public:
  WidgetPDial *phaserp9;
private:
  inline void cb_phaserp9_i(WidgetPDial*, void*);
  static void cb_phaserp9(WidgetPDial*, void*);
public:
  Fl_Check_Button *phaserp10;
private:
  inline void cb_phaserp10_i(Fl_Check_Button*, void*);
  static void cb_phaserp10(Fl_Check_Button*, void*);
public:
  WidgetPDial *phaserp11;
private:
  inline void cb_phaserp11_i(WidgetPDial*, void*);
  static void cb_phaserp11(WidgetPDial*, void*);
public:
  Fl_Check_Button *phaserp12;
private:
  inline void cb_phaserp12_i(Fl_Check_Button*, void*);
  static void cb_phaserp12(Fl_Check_Button*, void*);
public:
  WidgetPDial *phaserp13;
private:
  inline void cb_phaserp13_i(WidgetPDial*, void*);
  static void cb_phaserp13(WidgetPDial*, void*);
public:
  Fl_Check_Button *phaserp14;
private:
  inline void cb_phaserp14_i(Fl_Check_Button*, void*);
  static void cb_phaserp14(Fl_Check_Button*, void*);
public:
  Fl_Group* make_alienwah_window();
  Fl_Group *effalienwahwindow;
  Fl_Choice *awp;
private:
  inline void cb_awp_i(Fl_Choice*, void*);
  static void cb_awp(Fl_Choice*, void*);
  static Fl_Menu_Item menu_awp[];
public:
  WidgetPDial *awp0;
private:
  inline void cb_awp0_i(WidgetPDial*, void*);
  static void cb_awp0(WidgetPDial*, void*);
public:
  WidgetPDial *awp1;
private:
  inline void cb_awp1_i(WidgetPDial*, void*);
  static void cb_awp1(WidgetPDial*, void*);
public:
  WidgetPDial *awp2;
private:
  inline void cb_awp2_i(WidgetPDial*, void*);
  static void cb_awp2(WidgetPDial*, void*);
public:
  WidgetPDial *awp3;
private:
  inline void cb_awp3_i(WidgetPDial*, void*);
  static void cb_awp3(WidgetPDial*, void*);
public:
  WidgetPDial *awp5;
private:
  inline void cb_awp5_i(WidgetPDial*, void*);
  static void cb_awp5(WidgetPDial*, void*);
public:
  WidgetPDial *awp6;
private:
  inline void cb_awp6_i(WidgetPDial*, void*);
  static void cb_awp6(WidgetPDial*, void*);
public:
  WidgetPDial *awp7;
private:
  inline void cb_awp7_i(WidgetPDial*, void*);
  static void cb_awp7(WidgetPDial*, void*);
public:
  WidgetPDial *awp9;
private:
  inline void cb_awp9_i(WidgetPDial*, void*);
  static void cb_awp9(WidgetPDial*, void*);
public:
  Fl_Choice *awp4;
private:
  inline void cb_awp4_i(Fl_Choice*, void*);
  static void cb_awp4(Fl_Choice*, void*);
  static Fl_Menu_Item menu_awp4[];
public:
  WidgetPDial *awp10;
private:
  inline void cb_awp10_i(WidgetPDial*, void*);
  static void cb_awp10(WidgetPDial*, void*);
public:
  Fl_Counter *awp8;
private:
  inline void cb_awp8_i(Fl_Counter*, void*);
  static void cb_awp8(Fl_Counter*, void*);
public:
  Fl_Group* make_distorsion_window();
  Fl_Group *effdistorsionwindow;
  Fl_Choice *distp;
private:
  inline void cb_distp_i(Fl_Choice*, void*);
  static void cb_distp(Fl_Choice*, void*);
  static Fl_Menu_Item menu_distp[];
public:
  WidgetPDial *distp0;
private:
  inline void cb_distp0_i(WidgetPDial*, void*);
  static void cb_distp0(WidgetPDial*, void*);
public:
  WidgetPDial *distp1;
private:
  inline void cb_distp1_i(WidgetPDial*, void*);
  static void cb_distp1(WidgetPDial*, void*);
public:
  WidgetPDial *distp2;
private:
  inline void cb_distp2_i(WidgetPDial*, void*);
  static void cb_distp2(WidgetPDial*, void*);
public:
  WidgetPDial *distp3;
private:
  inline void cb_distp3_i(WidgetPDial*, void*);
  static void cb_distp3(WidgetPDial*, void*);
public:
  WidgetPDial *distp4;
private:
  inline void cb_distp4_i(WidgetPDial*, void*);
  static void cb_distp4(WidgetPDial*, void*);
public:
  WidgetPDial *distp7;
private:
  inline void cb_distp7_i(WidgetPDial*, void*);
  static void cb_distp7(WidgetPDial*, void*);
public:
  WidgetPDial *distp8;
private:
  inline void cb_distp8_i(WidgetPDial*, void*);
  static void cb_distp8(WidgetPDial*, void*);
public:
  Fl_Choice *distp5;
private:
  inline void cb_distp5_i(Fl_Choice*, void*);
  static void cb_distp5(Fl_Choice*, void*);
  static Fl_Menu_Item menu_distp5[];
public:
  Fl_Check_Button *distp6;
private:
  inline void cb_distp6_i(Fl_Check_Button*, void*);
  static void cb_distp6(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *distp9;
private:
  inline void cb_distp9_i(Fl_Check_Button*, void*);
  static void cb_distp9(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *distp10;
private:
  inline void cb_distp10_i(Fl_Check_Button*, void*);
  static void cb_distp10(Fl_Check_Button*, void*);
public:
  Fl_Group* make_eq_window();
  Fl_Group *effeqwindow;
  WidgetPDial *eqp0;
private:
  inline void cb_eqp0_i(WidgetPDial*, void*);
  static void cb_eqp0(WidgetPDial*, void*);
public:
  Fl_Counter *bandcounter;
private:
  inline void cb_bandcounter_i(Fl_Counter*, void*);
  static void cb_bandcounter(Fl_Counter*, void*);
public:
  Fl_Group *bandgroup;
  WidgetPDial *freqdial;
private:
  inline void cb_freqdial_i(WidgetPDial*, void*);
  static void cb_freqdial(WidgetPDial*, void*);
public:
  WidgetPDial *gaindial;
private:
  inline void cb_gaindial_i(WidgetPDial*, void*);
  static void cb_gaindial(WidgetPDial*, void*);
public:
  WidgetPDial *qdial;
private:
  inline void cb_qdial_i(WidgetPDial*, void*);
  static void cb_qdial(WidgetPDial*, void*);
public:
  Fl_Counter *stagescounter;
private:
  inline void cb_stagescounter_i(Fl_Counter*, void*);
  static void cb_stagescounter(Fl_Counter*, void*);
public:
  Fl_Choice *typechoice;
private:
  inline void cb_typechoice_i(Fl_Choice*, void*);
  static void cb_typechoice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_typechoice[];
public:
  EQGraph *eqgraph;
  Fl_Group* make_dynamicfilter_window();
  Fl_Group *effdynamicfilterwindow;
  Fl_Choice *dfp;
private:
  inline void cb_dfp_i(Fl_Choice*, void*);
  static void cb_dfp(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dfp[];
public:
  WidgetPDial *dfp0;
private:
  inline void cb_dfp0_i(WidgetPDial*, void*);
  static void cb_dfp0(WidgetPDial*, void*);
public:
  WidgetPDial *dfp1;
private:
  inline void cb_dfp1_i(WidgetPDial*, void*);
  static void cb_dfp1(WidgetPDial*, void*);
public:
  WidgetPDial *dfp2;
private:
  inline void cb_dfp2_i(WidgetPDial*, void*);
  static void cb_dfp2(WidgetPDial*, void*);
public:
  WidgetPDial *dfp3;
private:
  inline void cb_dfp3_i(WidgetPDial*, void*);
  static void cb_dfp3(WidgetPDial*, void*);
public:
  WidgetPDial *dfp5;
private:
  inline void cb_dfp5_i(WidgetPDial*, void*);
  static void cb_dfp5(WidgetPDial*, void*);
public:
  WidgetPDial *dfp6;
private:
  inline void cb_dfp6_i(WidgetPDial*, void*);
  static void cb_dfp6(WidgetPDial*, void*);
public:
  Fl_Choice *dfp4;
private:
  inline void cb_dfp4_i(Fl_Choice*, void*);
  static void cb_dfp4(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dfp4[];
  inline void cb_Filter_i(Fl_Button*, void*);
  static void cb_Filter(Fl_Button*, void*);
public:
  WidgetPDial *dfp7;
private:
  inline void cb_dfp7_i(WidgetPDial*, void*);
  static void cb_dfp7(WidgetPDial*, void*);
public:
  WidgetPDial *dfp9;
private:
  inline void cb_dfp9_i(WidgetPDial*, void*);
  static void cb_dfp9(WidgetPDial*, void*);
public:
  Fl_Check_Button *dfp8;
private:
  inline void cb_dfp8_i(Fl_Check_Button*, void*);
  static void cb_dfp8(Fl_Check_Button*, void*);
public:
  Fl_Double_Window* make_filter_window();
  Fl_Double_Window *filterwindow;
private:
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  void init(EffectMgr *eff_);
  void refresh(EffectMgr *eff_);
  void refresh();
private:
  EffectMgr *eff; 
  int eqband; 
};

class SimpleEffUI : public Fl_Group,public PresetsUI_ {
public:
  SimpleEffUI(int x,int y, int w, int h, const char *label=0);
  ~SimpleEffUI();
  Fl_Group* make_null_window();
  Fl_Group *effnullwindow;
  Fl_Group* make_reverb_window();
  Fl_Group *effreverbwindow;
  Fl_Choice *revp;
private:
  inline void cb_revp5_i(Fl_Choice*, void*);
  static void cb_revp5(Fl_Choice*, void*);
  static Fl_Menu_Item menu_revp1[];
public:
  WidgetPDial *revp0;
private:
  inline void cb_revp01_i(WidgetPDial*, void*);
  static void cb_revp01(WidgetPDial*, void*);
public:
  WidgetPDial *revp2;
private:
  inline void cb_revp21_i(WidgetPDial*, void*);
  static void cb_revp21(WidgetPDial*, void*);
public:
  WidgetPDial *revp3;
private:
  inline void cb_revp31_i(WidgetPDial*, void*);
  static void cb_revp31(WidgetPDial*, void*);
public:
  WidgetPDial *revp9;
private:
  inline void cb_revp91_i(WidgetPDial*, void*);
  static void cb_revp91(WidgetPDial*, void*);
public:
  Fl_Group* make_echo_window();
  Fl_Group *effechowindow;
  Fl_Choice *echop;
private:
  inline void cb_echop7_i(Fl_Choice*, void*);
  static void cb_echop7(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echop1[];
public:
  WidgetPDial *echop0;
private:
  inline void cb_echop01_i(WidgetPDial*, void*);
  static void cb_echop01(WidgetPDial*, void*);
public:
  WidgetPDial *echop2;
private:
  inline void cb_echop21_i(WidgetPDial*, void*);
  static void cb_echop21(WidgetPDial*, void*);
public:
  WidgetPDial *echop5;
private:
  inline void cb_echop51_i(WidgetPDial*, void*);
  static void cb_echop51(WidgetPDial*, void*);
public:
  Fl_Group* make_chorus_window();
  Fl_Group *effchoruswindow;
  Fl_Choice *chorusp;
private:
  inline void cb_choruspa_i(Fl_Choice*, void*);
  static void cb_choruspa(Fl_Choice*, void*);
  static Fl_Menu_Item menu_chorusp1[];
public:
  WidgetPDial *chorusp0;
private:
  inline void cb_chorusp01_i(WidgetPDial*, void*);
  static void cb_chorusp01(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp2;
private:
  inline void cb_chorusp21_i(WidgetPDial*, void*);
  static void cb_chorusp21(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp6;
private:
  inline void cb_chorusp61_i(WidgetPDial*, void*);
  static void cb_chorusp61(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp7;
private:
  inline void cb_chorusp71_i(WidgetPDial*, void*);
  static void cb_chorusp71(WidgetPDial*, void*);
public:
  WidgetPDial *chorusp8;
private:
  inline void cb_chorusp81_i(WidgetPDial*, void*);
  static void cb_chorusp81(WidgetPDial*, void*);
  inline void cb_Flange1_i(Fl_Check_Button*, void*);
  static void cb_Flange1(Fl_Check_Button*, void*);
public:
  Fl_Group* make_phaser_window();
  Fl_Group *effphaserwindow;
  Fl_Choice *phaserp;
private:
  inline void cb_phaserpa_i(Fl_Choice*, void*);
  static void cb_phaserpa(Fl_Choice*, void*);
  static Fl_Menu_Item menu_phaserp1[];
public:
  WidgetPDial *phaserp0;
private:
  inline void cb_phaserp01_i(WidgetPDial*, void*);
  static void cb_phaserp01(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp2;
private:
  inline void cb_phaserp21_i(WidgetPDial*, void*);
  static void cb_phaserp21(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp5;
private:
  inline void cb_phaserp51_i(WidgetPDial*, void*);
  static void cb_phaserp51(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp6;
private:
  inline void cb_phaserp61_i(WidgetPDial*, void*);
  static void cb_phaserp61(WidgetPDial*, void*);
public:
  WidgetPDial *phaserp7;
private:
  inline void cb_phaserp71_i(WidgetPDial*, void*);
  static void cb_phaserp71(WidgetPDial*, void*);
public:
  Fl_Counter *phaserp8;
private:
  inline void cb_phaserp81_i(Fl_Counter*, void*);
  static void cb_phaserp81(Fl_Counter*, void*);
public:
  Fl_Group* make_alienwah_window();
  Fl_Group *effalienwahwindow;
  Fl_Choice *awp;
private:
  inline void cb_awpa_i(Fl_Choice*, void*);
  static void cb_awpa(Fl_Choice*, void*);
  static Fl_Menu_Item menu_awp1[];
public:
  WidgetPDial *awp0;
private:
  inline void cb_awp01_i(WidgetPDial*, void*);
  static void cb_awp01(WidgetPDial*, void*);
public:
  WidgetPDial *awp2;
private:
  inline void cb_awp21_i(WidgetPDial*, void*);
  static void cb_awp21(WidgetPDial*, void*);
public:
  WidgetPDial *awp6;
private:
  inline void cb_awp61_i(WidgetPDial*, void*);
  static void cb_awp61(WidgetPDial*, void*);
public:
  Fl_Counter *awp8;
private:
  inline void cb_awp81_i(Fl_Counter*, void*);
  static void cb_awp81(Fl_Counter*, void*);
public:
  Fl_Group* make_distorsion_window();
  Fl_Group *effdistorsionwindow;
  Fl_Choice *distp;
private:
  inline void cb_distpa_i(Fl_Choice*, void*);
  static void cb_distpa(Fl_Choice*, void*);
  static Fl_Menu_Item menu_distp1[];
public:
  WidgetPDial *distp0;
private:
  inline void cb_distp01_i(WidgetPDial*, void*);
  static void cb_distp01(WidgetPDial*, void*);
public:
  WidgetPDial *distp3;
private:
  inline void cb_distp31_i(WidgetPDial*, void*);
  static void cb_distp31(WidgetPDial*, void*);
public:
  WidgetPDial *distp4;
private:
  inline void cb_distp41_i(WidgetPDial*, void*);
  static void cb_distp41(WidgetPDial*, void*);
public:
  WidgetPDial *distp7;
private:
  inline void cb_distp71_i(WidgetPDial*, void*);
  static void cb_distp71(WidgetPDial*, void*);
public:
  Fl_Choice *distp5;
private:
  inline void cb_distp51_i(Fl_Choice*, void*);
  static void cb_distp51(Fl_Choice*, void*);
  static Fl_Menu_Item menu_distp51[];
public:
  Fl_Group* make_eq_window();
  Fl_Group *effeqwindow;
  Fl_Counter *bandcounter;
private:
  inline void cb_bandcounter1_i(Fl_Counter*, void*);
  static void cb_bandcounter1(Fl_Counter*, void*);
public:
  Fl_Group *bandgroup;
  WidgetPDial *freqdial;
private:
  inline void cb_freqdial1_i(WidgetPDial*, void*);
  static void cb_freqdial1(WidgetPDial*, void*);
public:
  WidgetPDial *gaindial;
private:
  inline void cb_gaindial1_i(WidgetPDial*, void*);
  static void cb_gaindial1(WidgetPDial*, void*);
public:
  WidgetPDial *qdial;
private:
  inline void cb_qdial1_i(WidgetPDial*, void*);
  static void cb_qdial1(WidgetPDial*, void*);
public:
  Fl_Counter *stagescounter;
private:
  inline void cb_stagescounter1_i(Fl_Counter*, void*);
  static void cb_stagescounter1(Fl_Counter*, void*);
public:
  Fl_Choice *typechoice;
private:
  inline void cb_typechoice1_i(Fl_Choice*, void*);
  static void cb_typechoice1(Fl_Choice*, void*);
  static Fl_Menu_Item menu_typechoice1[];
public:
  EQGraph *eqgraph;
  Fl_Group* make_dynamicfilter_window();
  Fl_Group *effdynamicfilterwindow;
  Fl_Choice *dfp;
private:
  inline void cb_dfpa_i(Fl_Choice*, void*);
  static void cb_dfpa(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dfp1[];
public:
  WidgetPDial *dfp0;
private:
  inline void cb_dfp01_i(WidgetPDial*, void*);
  static void cb_dfp01(WidgetPDial*, void*);
public:
  WidgetPDial *dfp2;
private:
  inline void cb_dfp21_i(WidgetPDial*, void*);
  static void cb_dfp21(WidgetPDial*, void*);
public:
  WidgetPDial *dfp6;
private:
  inline void cb_dfp61_i(WidgetPDial*, void*);
  static void cb_dfp61(WidgetPDial*, void*);
public:
  WidgetPDial *dfp7;
private:
  inline void cb_dfp71_i(WidgetPDial*, void*);
  static void cb_dfp71(WidgetPDial*, void*);
public:
  WidgetPDial *dfp9;
private:
  inline void cb_dfp91_i(WidgetPDial*, void*);
  static void cb_dfp91(WidgetPDial*, void*);
public:
  void init(EffectMgr *eff_);
  void refresh(EffectMgr *eff_);
  void refresh();
private:
  EffectMgr *eff; 
  int eqband; 
};
#endif
